"use strict";
const fs = require('fs-extra-promise');
function walk(path, filter) {
    let isFinished = false;
    let result = [];
    fs.walk(path)
        .on("data", (obj) => {
        if (filter(obj.path)) {
            result.push(obj.path);
        }
    })
        .on("end", () => { isFinished = true; });
    return new Promise((reslove, reject) => {
        function ticker() {
            if (isFinished) {
                reslove(result);
            }
            else {
                setTimeout(ticker, 100);
            }
        }
        setTimeout(ticker, 100);
    });
}
exports.walk = walk;
const cp = require('child_process');
exports.shell = (path, args, opt) => {
    var cmd = `${path} ${args.join(" ")}`;
    console.log(cmd);
    let printBufferMessage = (message) => {
        var str = message.toString();
        console.log(str);
    };
    let callback = (reslove, reject) => {
        var shell = cp.spawn(path, args, opt);
        shell.on("error", (message) => { console.log(message); });
        shell.stderr.on("data", printBufferMessage);
        shell.stderr.on("error", printBufferMessage);
        shell.stdout.on("data", printBufferMessage);
        shell.stdout.on("error", printBufferMessage);
        shell.on('exit', function (code) {
            if (code != 0) {
                console.log('Failed: ' + code);
                reject(code);
            }
            else {
                reslove(0);
            }
        });
    };
    return new Promise(callback);
};
