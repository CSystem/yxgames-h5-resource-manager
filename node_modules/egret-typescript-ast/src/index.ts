import * as ts from 'typescript';
import * as utils from 'egret-node-utils';
import * as fs from 'fs'
import * as decorator from './decorator';

export * from './decorator'


function findEnumClass(sourceFile: ts.SourceFile) {
    delintNode(sourceFile);

    function delintNode(node: ts.Node) {
        switch (node.kind) {
            case ts.SyntaxKind.ClassDeclaration:
                let declaration = node as ts.ClassDeclaration;
                // console.log(methodDeclaration);
                let members = declaration.members;
                if (members) {
                    let result = members.every((member) => {
                        if (!member.modifiers) {
                            return false;
                        }
                        return member.modifiers.some((modifier) => modifier.getText() == "static");
                    });
                    if (result) {
                        modifyClass(declaration);


                    }

                }

                break;
        }
        ts.forEachChild(node, delintNode);
    }

    function report(node: ts.Node, message: string) {
        let result = sourceFile.getLineAndCharacterOfPosition(node.getStart());

        console.log(`${sourceFile.fileName} (${result.line + 1},${result.character + 1}): ${message}`);
    }
}

function printClass(node: ts.Node) {
    let str = '';
    let visitor = (child: ts.Node) => {
        if (child.getChildCount() == 0) {
            str += child.getFullText() + "|"
            console.log(child)
        } else {
            child.getChildren().map(visitor);
        }

    }

    node.getChildren().map(visitor);
    console.log(str)



}


function modifyClass(declaration: ts.ClassDeclaration) {

    if (!window['xxx']) {
        window['xxx'] = declaration;

        declaration.name.text = 'fuckyoufuckyoufuckyou'
        printClass(declaration)

        // declaration.modifiers.map((a) => console.log(a.getText()));
        // // console.log (classDeclaration.)
        // let members = declaration.members;

        // let children = declaration.getChildren();
        // let token: ts.Node;

        // let updatedSourceFile = modifyNode(declaration.getSourceFile(), children[0], "const");
        // let updatedSourceFile2 = modifyNode(updatedSourceFile, children[1], "const");
        // console.log(updatedSourceFile2.getFullText())
        // let i: number = 0;
        // while (token = children[i]) {
        //     console.log (token.kind)
        //     if (token.kind == ts.SyntaxKind.ClassKeyword) {
        //         // modifyNode(token,"const");
        //     };
        //     i++;
        // }

        // let source = modifyNode(declaration.getFirstToken(), '1111');

        // let newText = source.getFullText();

        // console.log(newText)
    }
}

function modifyNode(source: ts.SourceFile, node: ts.Node, replacedStr: string) {
    let start = node.getStart();
    let end = node.getEnd();
    let span = ts.createTextSpan(start, node.getText().length)
    let range = ts.createTextChangeRange(span, replacedStr.length);
    let originText = node.getSourceFile().getFullText();
    let newText = `${originText.substr(0, start)}${replacedStr}${originText.substr(end)}`
    // let newText = .replace(node.getText(), replacedStr);
    return ts.updateSourceFile(node.getSourceFile(), newText, range, false);
}


