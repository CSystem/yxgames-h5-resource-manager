"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
const ts = require("typescript");
__export(require("./decorator"));
function findEnumClass(sourceFile) {
    delintNode(sourceFile);
    function delintNode(node) {
        switch (node.kind) {
            case ts.SyntaxKind.ClassDeclaration:
                let declaration = node;
                // console.log(methodDeclaration);
                let members = declaration.members;
                if (members) {
                    let result = members.every((member) => {
                        if (!member.modifiers) {
                            return false;
                        }
                        return member.modifiers.some((modifier) => modifier.getText() == "static");
                    });
                    if (result) {
                        modifyClass(declaration);
                    }
                }
                break;
        }
        ts.forEachChild(node, delintNode);
    }
    function report(node, message) {
        let result = sourceFile.getLineAndCharacterOfPosition(node.getStart());
        console.log(`${sourceFile.fileName} (${result.line + 1},${result.character + 1}): ${message}`);
    }
}
function printClass(node) {
    let str = '';
    let visitor = (child) => {
        if (child.getChildCount() == 0) {
            str += child.getFullText() + "|";
            console.log(child);
        }
        else {
            child.getChildren().map(visitor);
        }
    };
    node.getChildren().map(visitor);
    console.log(str);
}
function modifyClass(declaration) {
    if (!window['xxx']) {
        window['xxx'] = declaration;
        declaration.name.text = 'fuckyoufuckyoufuckyou';
        printClass(declaration);
    }
}
function modifyNode(source, node, replacedStr) {
    let start = node.getStart();
    let end = node.getEnd();
    let span = ts.createTextSpan(start, node.getText().length);
    let range = ts.createTextChangeRange(span, replacedStr.length);
    let originText = node.getSourceFile().getFullText();
    let newText = `${originText.substr(0, start)}${replacedStr}${originText.substr(end)}`;
    // let newText = .replace(node.getText(), replacedStr);
    return ts.updateSourceFile(node.getSourceFile(), newText, range, false);
}
